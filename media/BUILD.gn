import("//opencamera.gni")

group("media") {
  deps = [
    ":camera_info",
    ":media_video",
  ]
}

oc_library("media_service") {
  sources = [
    "media_service.cc",
    "media_service.h",
    "video_sink_wrapper.cc",
    "video_sink_wrapper.h",
  ]
  deps = [
    ":media_video",
    ":media_worker",
    "//base:logging",
    "//third_party/inih",
  ]

  deps += [
    "//api/video_codecs:builtin_video_encoder",
    "//api/video_codecs:fake_video_encoder",
  ]
  configs += [ "//build/config/compiler:rtti" ]
}

oc_library("media_worker") {
  sources = [
    "hybird_worker.cc",
    "hybird_worker.h",
    "media_transport.cc",
    "media_worker.h",
    "mediatransport.h",
  ]

  deps = [
    ":media_video",
    "//base:logging",
    "//base:task_util",
    "//common:foundation",
  ]
}

# video_capturer need rtti support, separate to a library
oc_library("video_capturer") {
  sources = [
    "video_capturer.cc",
    "video_capturer.h",
  ]
  configs += [ "//build/config/compiler:rtti" ]
}

oc_library("media_video") {
  sources = [
    "media_stream.h",
    "video_send_stream.cc",
    "video_send_stream.h",
    "video_stream_encoder.cc",
    "video_stream_encoder.h",
    "video_stream_helper.cc",
    "video_stream_helper.h",
    "video_stream_sender.cc",
    "video_stream_sender.h",
  ]

  sources += [ "media_worker.h" ]

  #  configs += [ "//build/config/compiler:rtti" ]

  deps = [
    ":file_sink",
    ":v4l2_video_source",
    ":video_capturer",
    "../base:sequence_checker",
    "//api/video:video_frame",
    "//api/video_codecs:video_encoder_api",
    "//base:logging",
    "//base:task_util",
    "//common:foundation",
  ]
}

oc_library("file_sink") {
  sources = [
    # "file_sink.cc",
    "file_sink.h",
  ]
  configs += [ "//build/config/compiler:rtti" ]
}

oc_library("video_base") {
  sources = [
    "video_broadcaster.h",
    "video_source_base.h",
  ]

  deps = [ "//api/video:video_frame" ]
}

oc_library("v4l2_video_source") {
  sources = [
    "v4l2_video_source.cc",
    "v4l2_video_source.h",
  ]

  deps = [
    ":video_base",
    "//api/video:video_frame",
    "//base:logging",
    "//base:task_util",
    "//common:foundation",
  ]
}

oc_executable("camera_info") {
  sources = [
    "camera_info/camera_info.cc",
    "camera_info/default_video_source_factory.h",
    "camera_info/v4l2_video_source.cc",
    "camera_info/v4l2_video_source.h",
    "camera_info/v4l2_video_source_factory.cc",
    "camera_info/video_source_factory.h",
  ]

  deps = [
    ":media_video",
    "//base:logging",
    "//common",
  ]
}
